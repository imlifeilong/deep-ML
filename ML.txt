【NLP】
	TF-IDF 词频-逆文本频率
		词频 词在文本中出现频率统计
		逆文本频率 词在所有文本中出现的频率，如果一个词在很多文本中出现，idf 低

	N-Gram
		一个句子中，词出现的概率与其前N个词有关

【tensorflow】
import tensorflow as tf

张量
	定义一个张量，tf.zeros([3])表示长度为3的数组，初始化为0
	bs = tf.Variable(tf.zeros([3]))

	定义一个常量
	co = tf.constant(10)

	查看bs的shape维度
	print(bs)

	sess = tf.Session()
	初始化变量
	sess.run(bs.initializer)
	初始化全局所有变量
	sess.run(tf.global_variables_initializer())
	查看没有被初始化的变量
	print(sess.run(tf.report_uninitialized_variables()))

	查看bs的值
	sess.run(bs)
	
	
	定义一个占位符
	n1 = tf.placeholder(tf.float32)
	n2 = tf.placeholder(tf.float32)
	定义公式乘法
	out = tf.multiply(n1,n2)
	
	传入运算值，并计算结果
	sess.run(out, feed_dict={n1:[3,5], n2:[6,7]})
	
	定义常量
	c = tf.constant([[1,2], [2,3], [3,4], [4,5]])
	对数据进行随机排序
	sf = tf.random_shuffle(c)
	
	a = tf.Variable(0)
	给a加1
	n = tf.add(a, tf.constant(1))
	将新n值赋给a
	sess.run(tf.assign(a, n))
	
	保存计算状态
	server = tf.train.Saver()
	server.save(sess, 保存路径)
	
	将numpy格式的数据，转换成tf格式
	na = np.zeros([2,3])
	tf.tf.convert_to_tensor(na)
	
	返回数组维度
	tf.rank(na)
	
	返回行列数
	tf.shape(na)
	
	返回每列最大值的索引
	tf.argmax(na, 0)
	返回每行最大值的索引
	tf.argmax(na, 1)
	
	比较数组是否相同
	tf.equal([2,3,4, 6], [2,3,4, 5])  array([ True,  True,  True, False])
	
	将比较结果转换成0，1
	tf.cast(tf.equal([2,3,4, 6], [2,3,4, 5]), 'float')
	
【分布】
	均匀分布 各元素出现的概率相同
	tf.random_uniform([1，2], -1.0, 1.0)
	从均匀分布中随机获取值，值大小在-1到1之间
	
	正态分布（高斯分布）正常的事务发生的概率比较大，异常的事务发生的概率比较小
	tf.random_normal([1,3], mean=-1, stddev=1)
	从正态分布中获取随机值，期望为-1，标准差为1
	